import  {useState, useEffect} from "react"

function A (){ => élément graphique que l'on va afficher à l'ecran

    const [nb,setNb] =useState(0)
	// nb => State
	// setNb => permet de modifier la valeur nb ET si elle est exécute alors rééxécute le composant

    // logique => traitement 

	function calcul (){
      setNb(20)

	} => impact sur le return (render) l'affichage du composant
    // pour que une fonction stockée dans un composant entraine une modification du render du composant
	// il faut utiliser des hook (fonction de react => use...)

	return <Text onPress={calcul}>{nb}</Text>
}

<p>0</p>
avec du js de base (web)
function calcul(){
    document.querySelector("p").innerHTML = 20
}

document.querySelector("p").addEventListener("click", calcul)

useState() => utilisateur va faire une action (cliquer écrire) => modifier le visuel du composant

=> exécuter un traitement suite à l'aparaition d'un evenement (déclenché par l'utilisateur ou cycle de vie du composant )

// appeler une API (base de données) lorsque le composant est chargé 

useEffect( function(){ // effectuer un traitement suite à une modification
    fetch()
        .then()
        .then( data => setDonnee(data) ) ....
} , []) 

// appeler une API je clique sur le bouton ok d'un formulaire 

useEffect( function(){ // effectuer un traitement suite à une modification
    fetch()
        .then()
        .then( data => setDonnee(data) ) ....
} , [compteur])

// 

